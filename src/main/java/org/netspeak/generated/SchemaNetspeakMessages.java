// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from NetspeakMessages.proto

package org.netspeak.generated;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class SchemaNetspeakMessages
{

    public static final class Properties
    {

        public static final class Property
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Properties.Property>
            {
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Properties.Property message) throws IOException
                {
                    if(message.hasKey())
                        output.writeString(1, message.getKey(), false);
                    if(message.hasValue())
                        output.writeString(2, message.getValue(), false);
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Properties.Property message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Property.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Property.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Properties.Property> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.class.getName();
                }
                //unused
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Properties.Property message) throws IOException {}
                public org.netspeak.generated.NetspeakMessages.Properties.Property newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Properties.Property.Builder>
            {
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Properties.Property.Builder builder) throws IOException
                {
                    for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                    {
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setKey(input.readString());
                                break;
                            case 2:
                                builder.setValue(input.readString());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Properties.Property.Builder builder)
                {
                    return builder.isInitialized();
                }
                public org.netspeak.generated.NetspeakMessages.Properties.Property.Builder newMessage()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Property.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Property.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Properties.Property.Builder> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.Builder.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Properties.Property.class.getName();
                }
                //unused
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Properties.Property.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                return String.valueOf(number);
            }
            public static int getFieldNumber(String name)
            {
                return Integer.parseInt(name);
            }

        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Properties>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Properties message) throws IOException
            {
                for(org.netspeak.generated.NetspeakMessages.Properties.Property property : message.getPropertyList())
                    output.writeObject(1, property, org.netspeak.generated.SchemaNetspeakMessages.Properties.Property.WRITE, true);

            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Properties message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return Properties.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Properties.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Properties> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Properties message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.Properties newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Properties.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Properties.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addProperty(input.mergeObject(org.netspeak.generated.NetspeakMessages.Properties.Property.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Properties.Property.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Properties.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.Properties.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.newBuilder();
            }
            public String getFieldName(int number)
            {
                return Properties.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Properties.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Properties.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Properties.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Properties.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class Query
    {

        public static final class Unit
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Query.Unit>
            {
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Query.Unit message) throws IOException
                {
                    if(message.hasTag())
                        output.writeEnum(1, message.getTag().getNumber(), false);
                    if(message.hasText())
                        output.writeString(2, message.getText(), false);
                    if(message.hasPosition())
                        output.writeUInt32(3, message.getPosition(), false);
                    if(message.hasFrequency())
                        output.writeUInt64(4, message.getFrequency(), false);
                    if(message.hasQuantile())
                        output.writeDouble(5, message.getQuantile(), false);
                    if(message.hasPruning())
                        output.writeUInt32(6, message.getPruning(), false);
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Query.Unit message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Unit.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Unit.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Query.Unit> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.class.getName();
                }
                //unused
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Query.Unit message) throws IOException {}
                public org.netspeak.generated.NetspeakMessages.Query.Unit newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Query.Unit.Builder>
            {
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Query.Unit.Builder builder) throws IOException
                {
                    for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                    {
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setTag(org.netspeak.generated.NetspeakMessages.Query.Unit.Tag.valueOf(input.readEnum()));
                                break;
                            case 2:
                                builder.setText(input.readString());
                                break;
                            case 3:
                                builder.setPosition(input.readUInt32());
                                break;
                            case 4:
                                builder.setFrequency(input.readUInt64());
                                break;
                            case 5:
                                builder.setQuantile(input.readDouble());
                                break;
                            case 6:
                                builder.setPruning(input.readUInt32());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Query.Unit.Builder builder)
                {
                    return builder.isInitialized();
                }
                public org.netspeak.generated.NetspeakMessages.Query.Unit.Builder newMessage()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Unit.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Unit.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Query.Unit.Builder> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.Builder.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Query.Unit.class.getName();
                }
                //unused
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Query.Unit.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                return String.valueOf(number);
            }
            public static int getFieldNumber(String name)
            {
                return Integer.parseInt(name);
            }

        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Query>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Query message) throws IOException
            {
                for(org.netspeak.generated.NetspeakMessages.Query.Unit unit : message.getUnitList())
                    output.writeObject(1, unit, org.netspeak.generated.SchemaNetspeakMessages.Query.Unit.WRITE, true);

            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Query message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return Query.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Query.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Query> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Query.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Query.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Query.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Query message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.Query newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Query.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Query.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addUnit(input.mergeObject(org.netspeak.generated.NetspeakMessages.Query.Unit.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Query.Unit.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Query.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.Query.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.Query.newBuilder();
            }
            public String getFieldName(int number)
            {
                return Query.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Query.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Query.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Query.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Query.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Query.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Query.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class Phrase
    {

        public static final class Word
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Phrase.Word>
            {
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Phrase.Word message) throws IOException
                {
                    if(message.hasTag())
                        output.writeEnum(1, message.getTag().getNumber(), false);
                    if(message.hasText())
                        output.writeString(2, message.getText(), false);
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Phrase.Word message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return Word.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Word.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Phrase.Word> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.class.getName();
                }
                //unused
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Phrase.Word message) throws IOException {}
                public org.netspeak.generated.NetspeakMessages.Phrase.Word newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder>
            {
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder builder) throws IOException
                {
                    for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                    {
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setTag(org.netspeak.generated.NetspeakMessages.Phrase.Word.Tag.valueOf(input.readEnum()));
                                break;
                            case 2:
                                builder.setText(input.readString());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder builder)
                {
                    return builder.isInitialized();
                }
                public org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder newMessage()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return Word.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return Word.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.Phrase.Word.class.getName();
                }
                //unused
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Phrase.Word.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                return String.valueOf(number);
            }
            public static int getFieldNumber(String name)
            {
                return Integer.parseInt(name);
            }

        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Phrase>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Phrase message) throws IOException
            {
                if(message.hasId())
                    output.writeUInt64(1, message.getId(), false);
                if(message.hasFrequency())
                    output.writeUInt64(2, message.getFrequency(), false);
                for(org.netspeak.generated.NetspeakMessages.Phrase.Word word : message.getWordList())
                    output.writeObject(3, word, org.netspeak.generated.SchemaNetspeakMessages.Phrase.Word.WRITE, true);

            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Phrase message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return Phrase.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Phrase.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Phrase> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Phrase message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.Phrase newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Phrase.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Phrase.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setId(input.readUInt64());
                            break;
                        case 2:
                            builder.setFrequency(input.readUInt64());
                            break;
                        case 3:
                            builder.addWord(input.mergeObject(org.netspeak.generated.NetspeakMessages.Phrase.Word.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Phrase.Word.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Phrase.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.Phrase.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.newBuilder();
            }
            public String getFieldName(int number)
            {
                return Phrase.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Phrase.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Phrase.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Phrase.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Phrase.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class Request
    {
        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Request>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Request message) throws IOException
            {
                if(message.hasQuery())
                    output.writeString(1, message.getQuery(), false);
                if(message.hasMaxPhraseCount())
                    output.writeUInt32(2, message.getMaxPhraseCount(), false);
                if(message.hasMaxPhraseFrequency())
                    output.writeUInt64(3, message.getMaxPhraseFrequency(), false);
                if(message.hasPhraseLengthMin())
                    output.writeUInt32(4, message.getPhraseLengthMin(), false);
                if(message.hasPhraseLengthMax())
                    output.writeUInt32(5, message.getPhraseLengthMax(), false);
                if(message.hasPruningLow())
                    output.writeUInt32(6, message.getPruningLow(), false);
                if(message.hasPruningHigh())
                    output.writeUInt32(7, message.getPruningHigh(), false);
                if(message.hasQuantileLow())
                    output.writeDouble(8, message.getQuantileLow(), false);
                if(message.hasQuantileHigh())
                    output.writeDouble(9, message.getQuantileHigh(), false);
                if(message.hasMaxRegexwordMatches())
                    output.writeUInt32(10, message.getMaxRegexwordMatches(), false);
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Request message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return Request.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Request.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Request> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Request.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Request.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Request.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Request message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.Request newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Request.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Request.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQuery(input.readString());
                            break;
                        case 2:
                            builder.setMaxPhraseCount(input.readUInt32());
                            break;
                        case 3:
                            builder.setMaxPhraseFrequency(input.readUInt64());
                            break;
                        case 4:
                            builder.setPhraseLengthMin(input.readUInt32());
                            break;
                        case 5:
                            builder.setPhraseLengthMax(input.readUInt32());
                            break;
                        case 6:
                            builder.setPruningLow(input.readUInt32());
                            break;
                        case 7:
                            builder.setPruningHigh(input.readUInt32());
                            break;
                        case 8:
                            builder.setQuantileLow(input.readDouble());
                            break;
                        case 9:
                            builder.setQuantileHigh(input.readDouble());
                            break;
                        case 10:
                            builder.setMaxRegexwordMatches(input.readUInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Request.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.Request.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.Request.newBuilder();
            }
            public String getFieldName(int number)
            {
                return Request.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Request.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Request.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Request.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Request.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Request.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Request.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class QueryResult
    {

        public static final class PhraseRef
        {
            public static final MessageSchema WRITE = new MessageSchema();
            public static final BuilderSchema MERGE = new BuilderSchema();
            
            public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef>
            {
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef message) throws IOException
                {
                    if(message.hasQueryId())
                        output.writeUInt32(1, message.getQueryId(), false);
                    if(message.hasFrequency())
                        output.writeUInt32(2, message.getFrequency(), false);
                    if(message.hasLength())
                        output.writeUInt32(3, message.getLength(), false);
                    if(message.hasId())
                        output.writeUInt32(4, message.getId(), false);
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef message)
                {
                    return message.isInitialized();
                }
                public String getFieldName(int number)
                {
                    return PhraseRef.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return PhraseRef.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.class.getName();
                }
                //unused
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef message) throws IOException {}
                public org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef newMessage() { return null; }
            }
            public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder>
            {
                public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder builder) throws IOException
                {
                    for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                    {
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.setQueryId(input.readUInt32());
                                break;
                            case 2:
                                builder.setFrequency(input.readUInt32());
                                break;
                            case 3:
                                builder.setLength(input.readUInt32());
                                break;
                            case 4:
                                builder.setId(input.readUInt32());
                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder builder)
                {
                    return builder.isInitialized();
                }
                public org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder newMessage()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.newBuilder();
                }
                public String getFieldName(int number)
                {
                    return PhraseRef.getFieldName(number);
                }
                public int getFieldNumber(String name)
                {
                    return PhraseRef.getFieldNumber(name);
                }
                public Class<org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder> typeClass()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder.class;
                }
                public String messageName()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.class.getSimpleName();
                }
                public String messageFullName()
                {
                    return org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.class.getName();
                }
                //unused
                public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.Builder builder) throws IOException {}
            }
            public static String getFieldName(int number)
            {
                return String.valueOf(number);
            }
            public static int getFieldNumber(String name)
            {
                return Integer.parseInt(name);
            }

        }

        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.QueryResult>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.QueryResult message) throws IOException
            {
                if(message.hasQuery())
                    output.writeObject(1, message.getQuery(), org.netspeak.generated.SchemaNetspeakMessages.Query.WRITE, false);

                if(message.hasRequest())
                    output.writeObject(2, message.getRequest(), org.netspeak.generated.SchemaNetspeakMessages.Request.WRITE, false);

                for(org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef reference : message.getReferenceList())
                    output.writeObject(3, reference, org.netspeak.generated.SchemaNetspeakMessages.QueryResult.PhraseRef.WRITE, true);

                if(message.hasPhrase())
                    output.writeObject(4, message.getPhrase(), org.netspeak.generated.SchemaNetspeakMessages.Phrase.WRITE, false);

                if(message.hasUnionSize())
                    output.writeUInt64(5, message.getUnionSize(), false);
                for(String unknownWord : message.getUnknownWordList())
                    output.writeString(6, unknownWord, true);
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.QueryResult message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return QueryResult.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return QueryResult.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.QueryResult> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.QueryResult message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.QueryResult newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.QueryResult.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.QueryResult.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQuery(input.mergeObject(org.netspeak.generated.NetspeakMessages.Query.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Query.MERGE));

                            break;
                        case 2:
                            builder.setRequest(input.mergeObject(org.netspeak.generated.NetspeakMessages.Request.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Request.MERGE));

                            break;
                        case 3:
                            builder.addReference(input.mergeObject(org.netspeak.generated.NetspeakMessages.QueryResult.PhraseRef.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.QueryResult.PhraseRef.MERGE));

                            break;
                        case 4:
                            builder.setPhrase(input.mergeObject(org.netspeak.generated.NetspeakMessages.Phrase.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Phrase.MERGE));

                            break;
                        case 5:
                            builder.setUnionSize(input.readUInt64());
                            break;
                        case 6:
                            builder.addUnknownWord(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.QueryResult.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.QueryResult.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.newBuilder();
            }
            public String getFieldName(int number)
            {
                return QueryResult.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return QueryResult.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.QueryResult.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.QueryResult.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.QueryResult.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class RawResponse
    {
        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.RawResponse>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.RawResponse message) throws IOException
            {
                if(message.hasRequest())
                    output.writeObject(1, message.getRequest(), org.netspeak.generated.SchemaNetspeakMessages.Request.WRITE, false);

                for(String queryToken : message.getQueryTokenList())
                    output.writeString(2, queryToken, true);
                if(message.hasQuery())
                    output.writeObject(3, message.getQuery(), org.netspeak.generated.SchemaNetspeakMessages.Query.WRITE, false);

                for(org.netspeak.generated.NetspeakMessages.QueryResult queryResult : message.getQueryResultList())
                    output.writeObject(4, queryResult, org.netspeak.generated.SchemaNetspeakMessages.QueryResult.WRITE, true);

                if(message.hasErrorCode())
                    output.writeUInt32(5, message.getErrorCode(), false);
                if(message.hasErrorMessage())
                    output.writeString(6, message.getErrorMessage(), false);
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.RawResponse message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return RawResponse.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return RawResponse.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.RawResponse> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.RawResponse message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.RawResponse newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.RawResponse.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.RawResponse.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setRequest(input.mergeObject(org.netspeak.generated.NetspeakMessages.Request.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Request.MERGE));

                            break;
                        case 2:
                            builder.addQueryToken(input.readString());
                            break;
                        case 3:
                            builder.setQuery(input.mergeObject(org.netspeak.generated.NetspeakMessages.Query.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Query.MERGE));

                            break;
                        case 4:
                            builder.addQueryResult(input.mergeObject(org.netspeak.generated.NetspeakMessages.QueryResult.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.QueryResult.MERGE));

                            break;
                        case 5:
                            builder.setErrorCode(input.readUInt32());
                            break;
                        case 6:
                            builder.setErrorMessage(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.RawResponse.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.RawResponse.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.newBuilder();
            }
            public String getFieldName(int number)
            {
                return RawResponse.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return RawResponse.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.RawResponse.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.RawResponse.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.RawResponse.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

    public static final class Response
    {
        public static final MessageSchema WRITE = new MessageSchema();
        public static final BuilderSchema MERGE = new BuilderSchema();
        
        public static class MessageSchema implements Schema<org.netspeak.generated.NetspeakMessages.Response>
        {
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Response message) throws IOException
            {
                if(message.hasRequest())
                    output.writeObject(1, message.getRequest(), org.netspeak.generated.SchemaNetspeakMessages.Request.WRITE, false);

                for(String queryToken : message.getQueryTokenList())
                    output.writeString(2, queryToken, true);
                if(message.hasQuery())
                    output.writeObject(3, message.getQuery(), org.netspeak.generated.SchemaNetspeakMessages.Query.WRITE, false);

                for(org.netspeak.generated.NetspeakMessages.Phrase phrase : message.getPhraseList())
                    output.writeObject(4, phrase, org.netspeak.generated.SchemaNetspeakMessages.Phrase.WRITE, true);

                for(String unknownWord : message.getUnknownWordList())
                    output.writeString(5, unknownWord, true);
                if(message.hasTotalUnionSize())
                    output.writeUInt64(6, message.getTotalUnionSize(), false);
                if(message.hasTotalFrequency())
                    output.writeUInt64(7, message.getTotalFrequency(), false);
                if(message.hasResumeFrequency())
                    output.writeUInt64(8, message.getResumeFrequency(), false);
                if(message.hasErrorCode())
                    output.writeUInt32(9, message.getErrorCode(), false);
                if(message.hasErrorMessage())
                    output.writeString(10, message.getErrorMessage(), false);
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Response message)
            {
                return message.isInitialized();
            }
            public String getFieldName(int number)
            {
                return Response.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Response.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Response> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Response.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Response.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Response.class.getName();
            }
            //unused
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Response message) throws IOException {}
            public org.netspeak.generated.NetspeakMessages.Response newMessage() { return null; }
        }
        public static class BuilderSchema implements Schema<org.netspeak.generated.NetspeakMessages.Response.Builder>
        {
            public void mergeFrom(Input input, org.netspeak.generated.NetspeakMessages.Response.Builder builder) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setRequest(input.mergeObject(org.netspeak.generated.NetspeakMessages.Request.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Request.MERGE));

                            break;
                        case 2:
                            builder.addQueryToken(input.readString());
                            break;
                        case 3:
                            builder.setQuery(input.mergeObject(org.netspeak.generated.NetspeakMessages.Query.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Query.MERGE));

                            break;
                        case 4:
                            builder.addPhrase(input.mergeObject(org.netspeak.generated.NetspeakMessages.Phrase.newBuilder(), org.netspeak.generated.SchemaNetspeakMessages.Phrase.MERGE));

                            break;
                        case 5:
                            builder.addUnknownWord(input.readString());
                            break;
                        case 6:
                            builder.setTotalUnionSize(input.readUInt64());
                            break;
                        case 7:
                            builder.setTotalFrequency(input.readUInt64());
                            break;
                        case 8:
                            builder.setResumeFrequency(input.readUInt64());
                            break;
                        case 9:
                            builder.setErrorCode(input.readUInt32());
                            break;
                        case 10:
                            builder.setErrorMessage(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.netspeak.generated.NetspeakMessages.Response.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.netspeak.generated.NetspeakMessages.Response.Builder newMessage()
            {
                return org.netspeak.generated.NetspeakMessages.Response.newBuilder();
            }
            public String getFieldName(int number)
            {
                return Response.getFieldName(number);
            }
            public int getFieldNumber(String name)
            {
                return Response.getFieldNumber(name);
            }
            public Class<org.netspeak.generated.NetspeakMessages.Response.Builder> typeClass()
            {
                return org.netspeak.generated.NetspeakMessages.Response.Builder.class;
            }
            public String messageName()
            {
                return org.netspeak.generated.NetspeakMessages.Response.class.getSimpleName();
            }
            public String messageFullName()
            {
                return org.netspeak.generated.NetspeakMessages.Response.class.getName();
            }
            //unused
            public void writeTo(Output output, org.netspeak.generated.NetspeakMessages.Response.Builder builder) throws IOException {}
        }
        public static String getFieldName(int number)
        {
            return String.valueOf(number);
        }
        public static int getFieldNumber(String name)
        {
            return Integer.parseInt(name);
        }

    }

}
